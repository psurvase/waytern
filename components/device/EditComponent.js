import React from "react";import Card from "@mui/material/Card";import CardContent from "@mui/material/CardContent";import Typography from "@mui/material/Typography";import {  Grid,  InputAdornment,  InputLabel,  OutlinedInput,} from "@mui/material";import { makeStyles } from "@mui/styles";import Button from "@mui/material/Button";import { useForm } from "react-hook-form";import { yupResolver } from "@hookform/resolvers/yup";import * as yup from "yup";import Checkbox from '@mui/material/Checkbox';import TextField from "@mui/material/TextField";import TextareaAutosize from '@mui/material/TextareaAutosize';import FormControl from '@mui/material/FormControl';import Select from '@mui/material/Select';import Switch from '@mui/material/Switch';import MenuItem from '@mui/material/MenuItem';import Stack from "@mui/material/Stack";import AdapterDateFns from "@mui/lab/AdapterDateFns";import LocalizationProvider from "@mui/lab/LocalizationProvider";import DatePicker from "@mui/lab/DatePicker";import { useRouter } from 'next/router';import { createDevice } from "../../services/DeviceAction";const useStyles = makeStyles((theme) => ({    buttonStyle: {      display: "flex",      justifyContent: "flex-end",    },    errorFieldStyle: {      fontSize: "14px",      color: "red",    },  }));  const schema = yup  .object({        name: yup.string().required(),                                xCoordinate: yup.number().required().positive(),                                yCoordinate: yup.number().required().positive(),                                macId: yup.string().required(),                            }).required();const EditComponent = ({device}) => {    const classes = useStyles();    const router = useRouter();      const [checked, setChecked] = React.useState(false);    const handleStatus = (e) => {        setChecked(true);       };           ;     const {register, watch, control, reset, handleSubmit, formState: { errors },} = useForm({resolver: yupResolver(schema),        defaultValues: {              name:device?.name,                status:checked,              xCoordinate:device?.xCoordinate,              yCoordinate:device?.yCoordinate,              macId:device?.macId,        },    });    const onSubmit = async (data) => {        try {          const body = {          name: data?.name,          status:checked,                     xCoordinate: data?.xCoordinate,          yCoordinate: data?.yCoordinate,          macId: data?.macId,               };                   await fetch("/api/device/"+device.id, {              method: 'PUT',              headers: { 'Content-Type': 'application/json' },              body: JSON.stringify(body),          });          await router.push("/device");      } catch (error) {          console.error(error);      }        reset({            name:"",            status:"",            xCoordinate:"",            yCoordinate:"",            macId:"",        });      }  return (    <>        <form onSubmit={handleSubmit(onSubmit)} m={2}>          <Grid pl={5} pt={2} >                <Typography fontWeight="bold" color="#334D6E">                  Add Devices                </Typography>              </Grid>            <Grid container spacing={3} pl={5} pr={3} pt={3} pb={5}>               <Grid item xs={12} sm={12} md={6} lg={4} xl={3} pr={2}>                <Typography>Device Name</Typography>                    <TextField                            size="small"                            {...register("name")}                            fullWidth                            placeholder="Device Name"                        ></TextField>                <span className={classes.errorFieldStyle}>                  {errors.name?.message}                </span>              </Grid>               <Grid item xs={12} sm={12} md={6} lg={4} xl={3} pr={2}>                <Typography>Status</Typography>                <Checkbox                   checked={checked}                        onClick={handleStatus}                        inputProps={{ "aria-label": "controlled" }} />                <span className={classes.errorFieldStyle}>                  {errors.status?.message}                </span>              </Grid>               <Grid item xs={12} sm={12} md={6} lg={4} xl={3} pr={2}>                <Typography>X Coordinate</Typography>                             <TextField                                  size="small"                                  {...register("xCoordinate")}                                  fullWidth                                  placeholder="X Coordinate"                              ></TextField>                                          <span className={classes.errorFieldStyle}>                  {errors.xCoordinate?.message}                </span>              </Grid>               <Grid item xs={12} sm={12} md={6} lg={4} xl={3} pr={2}>                <Typography>Y Coordinate</Typography>                             <TextField                                  size="small"                                  {...register("yCoordinate")}                                  fullWidth                                  placeholder="Y Coordinate"                              ></TextField>                                          <span className={classes.errorFieldStyle}>                  {errors.yCoordinate?.message}                </span>              </Grid>               <Grid item xs={12} sm={12} md={6} lg={4} xl={3} pr={2}>                <Typography>macId</Typography>                    <TextField                            size="small"                            {...register("macId")}                            fullWidth                            placeholder="macId"                        ></TextField>                <span className={classes.errorFieldStyle}>                  {errors.macId?.message}                </span>              </Grid>          </Grid>          <Grid className={classes.buttonStyle} mb={2} pr={5}>          <Stack className={classes.buttonStyle} direction="row" spacing={3}>                <Button                  style={{ color: "#334D6E" }}                  variant="outlined"                  onClick={() => router.back()}                >                  Cancel                </Button>                <Button                  variant="contained"                  type="submit"                >                  Save                </Button>              </Stack>          </Grid>          </form>    </>  )}export default EditComponent