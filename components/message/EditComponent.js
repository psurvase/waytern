import React from "react";import Card from "@mui/material/Card";import CardContent from "@mui/material/CardContent";import Typography from "@mui/material/Typography";import {  Grid,  InputAdornment,  InputLabel,  OutlinedInput,} from "@mui/material";import { makeStyles } from "@mui/styles";import Button from "@mui/material/Button";import { useForm } from "react-hook-form";import { yupResolver } from "@hookform/resolvers/yup";import * as yup from "yup";import Checkbox from '@mui/material/Checkbox';import TextField from "@mui/material/TextField";import TextareaAutosize from '@mui/material/TextareaAutosize';import FormControl from '@mui/material/FormControl';import Select from '@mui/material/Select';import Switch from '@mui/material/Switch';import MenuItem from '@mui/material/MenuItem';import Stack from "@mui/material/Stack";import AdapterDateFns from "@mui/lab/AdapterDateFns";import LocalizationProvider from "@mui/lab/LocalizationProvider";import DatePicker from "@mui/lab/DatePicker";import { useRouter } from 'next/router';import { createMessage } from "../../services/MessageAction";const useStyles = makeStyles((theme) => ({    buttonStyle: {      display: "flex",      justifyContent: "flex-end",    },    errorFieldStyle: {      fontSize: "14px",      color: "red",    },  }));  const schema = yup  .object({        message: yup.string().required(),                            }).required();const EditComponent = ({message}) => {    const classes = useStyles();    const router = useRouter();      const [checked, setChecked] = React.useState(false);    const handleStatus = (e) => {        setChecked(true);       };           ;     const {register, watch, control, reset, handleSubmit, formState: { errors },} = useForm({resolver: yupResolver(schema),        defaultValues: {              message:message?.message,        },    });    const onSubmit = async (data) => {        try {          const body = {          message: data?.message,               };                   await fetch("/api/message/"+message.id, {              method: 'PUT',              headers: { 'Content-Type': 'application/json' },              body: JSON.stringify(body),          });          await router.push("/message");      } catch (error) {          console.error(error);      }        reset({            message:"",        });      }  return (    <>        <form onSubmit={handleSubmit(onSubmit)} m={2}>          <Grid pl={5} pt={2} >                <Typography fontWeight="bold" color="#334D6E">                  Add Messages                </Typography>              </Grid>            <Grid container spacing={3} pl={5} pr={3} pt={3} pb={5}>               <Grid item xs={12} sm={12} md={6} lg={4} xl={3} pr={2}>                <Typography>Message</Typography>                    <TextField                            size="small"                            {...register("message")}                            fullWidth                            placeholder="Message"                        ></TextField>                <span className={classes.errorFieldStyle}>                  {errors.message?.message}                </span>              </Grid>          </Grid>          <Grid className={classes.buttonStyle} mb={2} pr={5}>          <Stack className={classes.buttonStyle} direction="row" spacing={3}>                <Button                  style={{ color: "#334D6E" }}                  variant="outlined"                  onClick={() => router.back()}                >                  Cancel                </Button>                <Button                  variant="contained"                  type="submit"                >                  Save                </Button>              </Stack>          </Grid>          </form>    </>  )}export default EditComponent